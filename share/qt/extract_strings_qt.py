#!/usr/bin/env python3
# Copyright (c) 2012-2019 The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.
'''
Extract _("...") strings for translation and convert to Qt stringdefs so that
they can be picked up by Qt linguist.
'''
from subprocess import Popen, PIPE
import operator
import os
import sys

OUT_CPP="qt/BGLstrings.cpp"
EMPTY=['""']

class Text():
    def __init__(self):
        self.messages = []
        self.msgid = []
        self.msgstr = []
        
        self.in_msgid = False
        self.in_msgstr = False
        
    def message_append(message):
        self.messages.append(message)
    
    def change_in_msgid(boolean1):
        self.in_msgid = boolean1
    
    def change_in_msgstr(boolean2):
        self.in_msgstr = boolean2
    
    def msgid_append(msgid1):
        self.msgid.append(msgid1)
    
    def msgstr_append(msgstr1):
        self.msgstr.append(msgstr1)
    
    def reset():
        self.messages = []
        self.msgid = []
        self.msgstr = []
        
        self.in_msgid = False
        self.in_msgstr = False

def parse_po(text):
    """
    Parse 'po' format produced by xgettext.
    Return a list of (msgid,msgstr) tuples.
    """
    text1 = Text()

    for line in text.split('\n'):
        line = line.rstrip('\r')
        if line.startswith('msgid '):
            if in_msgstr:
                text1.message_append((msgid, msgstr))
                text1.change_in_msgstr(False)
            # message start
            text1.change_in_msgid(True)

            text1.msgid = [line[6:]]
        elif line.startswith('msgstr '):
            text1.change_in_msgid(False)
            text1,change_in_msgstr(True)
            text1.msgstr = [line[7:]]
        elif line.startswith('"'):
            if text1.in_msgid:
                text1.msgid_append(line)
            if text1.in_msgstr:
                text1.msgstr_append(line)

    if text1.in_msgstr:
        text1.messages_append((msgid, msgstr))

    return text1.messages

files = sys.argv[1:]

# xgettext -n --keyword=_ $FILES
XGETTEXT=os.getenv('XGETTEXT', 'xgettext')
if not XGETTEXT:
    print('Cannot extract strings: xgettext utility is not installed or not configured.',file=sys.stderr)
    print('Please install package "gettext" and re-run \'./configure\'.',file=sys.stderr)
    sys.exit(1)
child = Popen([XGETTEXT,'--output=-','-n','--keyword=_'] + files, stdout=PIPE)
(out, err) = child.communicate()

text1 = Text()

text1.messages = parse_po(out.decode('utf-8'))

with open(OUT_CPP, 'w', encoding="utf8") as f:
    f.write("""

    #include <QtGlobal>

    // Automatically generated by extract_strings_qt.py
    #ifdef __GNUC__
    #define UNUSED __attribute__((unused))
    #else
    #define UNUSED
    #endif
    """)
    f.write('static const char UNUSED *BGL_strings[] = {\n')
    f.write('QT_TRANSLATE_NOOP("BGL-core", "%s"),\n' % (os.getenv('COPYRIGHT_HOLDERS'),))
    text1.messages.sort(key=operator.itemgetter(0))
    for (text1.msgid, text1.msgstr) in text1.messages:
        if text1.msgid != EMPTY:
            f.write('QT_TRANSLATE_NOOP("BGL-core", %s),\n' % ('\n'.join(msgid)))
    f.write('};\n')
