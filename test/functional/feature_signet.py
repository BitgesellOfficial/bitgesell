#!/usr/bin/env python3
# Copyright (c) 2019-2022 The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.
"""Test basic signet functionality"""

from decimal import Decimal

from test_framework.test_framework import BGLTestFramework
from test_framework.util import assert_equal

# This test case uses custom signet network generated for ADDR rbgl1q2lk0e5yjen2vq9pknxcr6xc32wp4hhpa8fgk2x
# and PRIV key cQ7AMSUGQcAPy3HwVRaZqAqnC4eVaAF8naEWekPHoodmV7uFw4kA
# and PUB key 03d47f70342433a1e56def6965f63ac147f5292a2054dfba4b98535a87d32f13db
# Mined 10 blocks with payout to tb1qnl2gquva8mzuc05y3pvad43vvju43wf0utk4eh with BGL signet network configuration:
#
# signet=1
# [signet]
# signetchallenge=512103d47f70342433a1e56def6965f63ac147f5292a2054dfba4b98535a87d32f13db51ae
#
# and BGL signet mined block hashes:
#
# 00000013f89b91fcb42990104959470e328670fa9f340d877a2f3962d80c1069
# 000000008eff18e829bf5fb7dd5cc2dbedce988d75f41b3284f50ea1752eba12
# 000000163f459d97b733950f52680182e5dc7d0dc0f8045a3da53dfbcf90dcb3
# 000000126d81eb5bbf89a6bd9aa1dfb2eb95606c27f8484cce3303b4dd0cbc0f
# 00000021c4c02b1e39f0dfb38a31e7a22f44ca1700e758bd34e99056b1cde7eb
# 000000163e5c118a7c15ad94cb598f8989421450d020a611f0fac127b552dc7e
# 0000000e150500c71e3a819f35e99ab8a5d16cc4e57e334cdf567c355c7ed3a8
# 0000000fc159cbf36ee52c9cde8f66b1acfec8bd8d1f5ee0817f4b90c16b005d
# 0000001dbc9305b21556c8c13cd19929c003d8eafa702f9b9073b847b832a159
# 0000000c297942cd68ae2154ff5c18784c192bc74b373229f2b434ef3d016b42

signet_blocks = [
    '000000203dd5063677584b973ff13e95db6d7deacf55b89293bededfb4eecfcd1800000030015276a8c59e9ff65c8bfe8685e66e8d4572daabb63e32b14528cb6fb808847c83b563ffff221d740eb30301020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025151feffffff0200c817a8040000001600149fd480719d3ec5cc3e848859d6d62c64b958b92f0000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa249004730440220403385e7e2bb11edc4694d57c880218aaa0012dc23c5a334be26e4ff4c132449022048607eeadc5a61449c6af9593bf9675291bdb8477a2187416dae405ce526a5ba01000120000000000000000000000000000000000000000000000000000000000000000000000000',
    '0000002069100cd862392f7a870d349ffa7086320e475949109029b4fc919bf813000000b3171b076db303a3e90d8ae4754e08b85e251f89206ee8831e5bd2191cde399fc283b563ffff221d95730e0201020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025251feffffff0200c817a8040000001600149fd480719d3ec5cc3e848859d6d62c64b958b92f0000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa2490047304402202464836b5f594d52b132f4f7c4db3553bd2e16a7fb836aa83255f82ec500c7b702201f51e854b0bb9c73fa9516fc42d220aaf595d12fd747be39fd16c5f101fa333301000120000000000000000000000000000000000000000000000000000000000000000000000000',
    '0000002012ba2e75a10ef584321bf4758d98ceeddbc25cddb75fbf29e818ff8e000000004720710f89b44b0239e100351cbfb3a5eff9dfac0a03502e12d0036451450ea0e183b563ffff221dea5ec80c01020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025351feffffff0200c817a8040000001600149fd480719d3ec5cc3e848859d6d62c64b958b92f0000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa24900473044022019f207dd04b42bccfd1b8c403d1242776506d12f50c9236c8e53290f46ed46420220245cf45e5d54c81d7d21049ea007607c6e09b3e3e4f21dd4601a11bafb93f38b01000120000000000000000000000000000000000000000000000000000000000000000000000000',
    '00000020b3dc90cffb3da53d5a04f8c00d7ddce5820168520f9533b7979d453f16000000a5210bcea1122650bbbc1825d89441ccefd4bd1809fa7fb18fe782f9c4307bde4084b563ffff221db222f40101020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025451feffffff0200c817a8040000001600149fd480719d3ec5cc3e848859d6d62c64b958b92f0000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa2490047304402206ea2f6b41222027938a44a7b996dc65ac24a59d32de9680014efd8b7cf80e18c022031b9d9f99b81e52c1e4a1ff9f0d202e356fee6672a30c16dac5509101ac28ec901000120000000000000000000000000000000000000000000000000000000000000000000000000',
    '000000200fbc0cddb40333ce4c48f8276c6095ebb2dfa19abda689bf5beb816d12000000dd4a0d92d17cde54cb011097fbdcea40ae4657236e0aed91dbf175f3e7c72b635884b563ffff221d7fa9430801020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025551feffffff0200c817a8040000001600149fd480719d3ec5cc3e848859d6d62c64b958b92f0000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa249004730440220199bc1a076d82a541f62bbc111710f7fe5ce10c0565bb4ada36a2c4e0337e04302203cccf1d8b71c4e4cdad57fc3be86c449f0ce08031c417b546cf2dce04573d98701000120000000000000000000000000000000000000000000000000000000000000000000000000',
    '00000020ebe7cdb15690e934bd58e70017ca442fa2e7318ab3dff0391e2bc0c421000000bf24ceee9608686855f86a251293a3ba3616ee0a0322b8451855d49441c8fe4aa384b563ffff221d988df60701020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025651feffffff0200c817a8040000001600149fd480719d3ec5cc3e848859d6d62c64b958b92f0000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa249004730440220695a7e797d159eea3daf8555391907c3f7183ef1f0196abd098c4ffc9d16cc0102202759be86c9dc93a78b81dcd4bd2a6df2e8bcc77b1508d95c3b2509bb965c864b01000120000000000000000000000000000000000000000000000000000000000000000000000000',
    '000000207edc52b527c1faf011a620d050144289898f59cb94ad157c8a115c3e160000002d1e9ae1fbca16e78ed0f8d5241aac7a7665355e4d663db554d3a7570b37c959e284b563ffff221d5430590701020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025751feffffff0200c817a8040000001600149fd480719d3ec5cc3e848859d6d62c64b958b92f0000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa249004730440220488dcf844a667081802b39fed26e0b519f76748972f6965ff45bdf689b6085a30220008faea476d7d41e25fa52e3592aad81fb05265eff084b11e90a86cb2d8e5c9f01000120000000000000000000000000000000000000000000000000000000000000000000000000',
    '00000020a8d37e5c357c56df4c337ee5c46cd1a5b89ae9359f813a1ec70005150e000000af87a67ebd1e0dafea7c38ceed1d138615b9003caf789fcd7cb2f8ca5fbe312b2a85b563ffff221d1a0b7d0501020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025851feffffff0200c817a8040000001600149fd480719d3ec5cc3e848859d6d62c64b958b92f0000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa249004730440220324d312586357ecea2d4691a626357fb126b9ddbd9d9a4b8947c3c46a6089b1802201c51a189e284170b79ca60d8aa175f03e35ff9693541af023396a9dadd65455401000120000000000000000000000000000000000000000000000000000000000000000000000000',
    '000000205d006bc1904b7f81e05e1f8dbdc8feacb1668fde9c2ce56ef3cb59c10f00000053e0f01f829148209112325c0c9f5261bd0349253c4d102a3207ce0a117890545785b563ffff221d7136f60201020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025951feffffff0200c817a8040000001600149fd480719d3ec5cc3e848859d6d62c64b958b92f0000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa249004730440220272174dcc431da7861e1ac812ac8d5cb41f62d4f438aeb924651db99a780d3ea02206a4a10c6035adba4b4343861301bedf9f846f50b0d353695ee2f2857954b928b01000120000000000000000000000000000000000000000000000000000000000000000000000000',
    '0000002059a132b847b873909b2f70faead803c02999d13cc1c85615b20593bc1d00000082e59ecb50fc3f72ba6fceba81ad9b9aa7bbf3ad3305aa0eb9bd35186873cc717985b563ffff221d2d6b611a01020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff025a51feffffff0200c817a8040000001600149fd480719d3ec5cc3e848859d6d62c64b958b92f0000000000000000776a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa2490047304402207622fdf1ef37b7d06c72378dc56ff40dc4da5fed45d59528c4bc905eef2da10e02205c2249157c5dfe607b59a24840e3c2011c83162941dbbab959ad8cf07a2422f201000120000000000000000000000000000000000000000000000000000000000000000000000000'
]


class SignetBasicTest(BGLTestFramework):
    def set_test_params(self):
        self.chain = "signet"
        self.num_nodes = 6
        self.setup_clean_chain = True
        shared_args1 = ["-signetchallenge=51"]  # OP_TRUE
        shared_args2 = ["-signetchallenge=512103d47f70342433a1e56def6965f63ac147f5292a2054dfba4b98535a87d32f13db51ae"]  # challenge for custom BGL signet network
        shared_args3 = ["-signetchallenge=522103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae"]

        self.extra_args = [
            shared_args1, shared_args1,
            shared_args2, shared_args2,
            shared_args3, shared_args3,
        ]

    def setup_network(self):
        self.setup_nodes()

        # Setup the three signets, which are incompatible with each other
        self.connect_nodes(0, 1)
        self.connect_nodes(2, 3)
        self.connect_nodes(4, 5)

    def run_test(self):
        self.log.info("basic tests using OP_TRUE challenge")

        self.log.info('getmininginfo')
        mining_info = self.nodes[0].getmininginfo()
        assert_equal(mining_info['blocks'], 0)
        assert_equal(mining_info['chain'], 'signet')
        assert 'currentblocktx' not in mining_info
        assert 'currentblockweight' not in mining_info
        assert_equal(mining_info['networkhashps'], Decimal('0'))
        assert_equal(mining_info['pooledtx'], 0)

        self.log.info("pregenerated signet blocks check")

        height = 0
        for block in signet_blocks:
            assert_equal(self.nodes[2].submitblock(block), None)
            height += 1
            assert_equal(self.nodes[2].getblockcount(), height)

        self.log.info("pregenerated signet blocks check (incompatible solution)")

        assert_equal(self.nodes[4].submitblock(signet_blocks[0]), 'bad-signet-blksig')

        self.log.info("test that signet logs the network magic on node start")
        with self.nodes[0].assert_debug_log(["Signet derived magic (message start)"]):
            self.restart_node(0)
        self.stop_node(0)
        self.nodes[0].assert_start_raises_init_error(extra_args=["-signetchallenge=abc"], expected_msg="Error: -signetchallenge must be hex, not 'abc'.")
        self.nodes[0].assert_start_raises_init_error(extra_args=["-signetchallenge=abc"] * 2, expected_msg="Error: -signetchallenge cannot be multiple values.")


if __name__ == '__main__':
    SignetBasicTest().main()
