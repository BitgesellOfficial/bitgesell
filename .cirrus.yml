env:
  ### cirrus config
  CIRRUS_CLONE_DEPTH: 1
  ### compiler options
  HOST:
  WRAPPER_CMD:
  # Specific warnings can be disabled with -Wno-error=foo.
  # -pedantic-errors is not equivalent to -Werror=pedantic and thus not implied by -Werror according to the GCC manual.
  WERROR_CFLAGS: -Werror -pedantic-errors
  MAKEFLAGS: -j4
  BUILD: check
  ### secp256k1 config
  ECMULTWINDOW: 15
  ECMULTGENKB: 22
  ASM: no
  WIDEMUL: auto
  WITH_VALGRIND: yes
  EXTRAFLAGS:
  ### secp256k1 modules
  EXPERIMENTAL: no
  ECDH: no
  RECOVERY: no
  SCHNORRSIG: no
  ELLSWIFT: no
  ### test options
  SECP256K1_TEST_ITERS:
  BENCH: yes
  SECP256K1_BENCH_ITERS: 2
  CTIMETESTS: yes
  # Compile and run the tests
  EXAMPLES: yes

# A self-hosted machine(s) can be used via Cirrus CI. It can be configured with
# multiple users to run tasks in parallel. No sudo permission is required.
#
# https://cirrus-ci.org/guide/persistent-workers/
#
# Generally, a persistent worker must run Ubuntu 23.04+ or Debian 12+.
#
# The following specific types should exist, with the following requirements:
# - small: For an x86_64 machine, recommended to have 2 CPUs and 8 GB of memory.
# - medium: For an x86_64 machine, recommended to have 4 CPUs and 16 GB of memory.
# - arm64: For an aarch64 machine, recommended to have 2 CPUs and 8 GB of memory.
#
# CI jobs for the latter configuration can be run on x86_64 hardware
# by installing qemu-user-static, which works out of the box with
# podman or docker. Background: https://stackoverflow.com/a/72890225/313633
#
# The above machine types are matched to each task by their label. Refer to the
# Cirrus CI docs for more details.
#
# On machines that are persisted between CI jobs, RESTART_CI_DOCKER_BEFORE_RUN=1
# ensures that previous containers and artifacts are cleared before each run.
# This requires installing Podman instead of Docker.
#
# Futhermore:
# - apt-get is required due to PACKAGE_MANAGER_INSTALL
# - podman-docker-4.1+ is required due to the bugfix in 4.1
#   (https://github.com/bitcoin/bitcoin/pull/21652#issuecomment-1657098200)
# - The ./ci/ dependencies (with cirrus-cli) should be installed. One-liner example
#   for a single user setup with sudo permission:
#
#   ```
#   apt update && apt install git screen python3 bash podman-docker curl -y && curl -L -o cirrus "https://github.com/cirruslabs/cirrus-cli/releases/latest/download/cirrus-linux-$(dpkg --print-architecture)" && mv cirrus /usr/local/bin/cirrus && chmod +x /usr/local/bin/cirrus
#   ```
#
# - There are no strict requirements on the hardware. Having fewer CPU threads
#   than recommended merely causes the CI script to run slower.
#   To avoid rare and intermittent OOM due to short memory usage spikes,
#   it is recommended to add (and persist) swap:
#
#   ```
#   fallocate -l 16G /swapfile_ci && chmod 600 /swapfile_ci && mkswap /swapfile_ci && swapon /swapfile_ci && ( echo '/swapfile_ci none swap sw 0 0' | tee -a /etc/fstab )
#   ```
#
# - To register the persistent worker, open a `screen` session and run:
#
#   ```
#   RESTART_CI_DOCKER_BEFORE_RUN=1 screen cirrus worker run --labels type=todo_fill_in_type --token todo_fill_in_token
#   ```

# https://cirrus-ci.org/guide/tips-and-tricks/#sharing-configuration-between-tasks
filter_template: &FILTER_TEMPLATE
  skip: $CIRRUS_REPO_FULL_NAME == "BGL-core/gui" && $CIRRUS_PR == ""  # No need to run on the read-only mirror, unless it is a PR. https://cirrus-ci.org/guide/writing-tasks/#conditional-task-execution
  stateful: false  # https://cirrus-ci.org/guide/writing-tasks/#stateful-tasks

base_template: &BASE_TEMPLATE
  << : *FILTER_TEMPLATE
  merge_base_script:
    # Unconditionally install git (used in fingerprint_script).
    - git --version || bash -c "$PACKAGE_MANAGER_INSTALL git"
    - if [ "$CIRRUS_PR" = "" ]; then exit 0; fi
    - git fetch $CIRRUS_REPO_CLONE_URL $CIRRUS_BASE_BRANCH
    - git config --global user.email "ci@ci.ci"
    - git config --global user.name "ci"
    - git merge FETCH_HEAD  # Merge base to detect silent merge conflicts

env_matrix_snippet: &ENV_MATRIX_VALGRIND
  - env:
      ENABLE_FIELDS: "7,32,58"
  - env:
      BUILD: distcheck
  - env:
      EXEC_CMD: valgrind --error-exitcode=42
      TESTRUNS: 1
      BUILD:

env_matrix_snippet: &ENV_MATRIX_SAN_VALGRIND
  - env:
      ENABLE_FIELDS: "11,64,37"
  - env:
      BUILD: distcheck
  - env:
      EXEC_CMD: valgrind --error-exitcode=42
      TESTRUNS: 1
      BUILD:
  - env:
      CXXFLAGS:  "-fsanitize=undefined -fno-omit-frame-pointer"
      LDFLAGS: "-fsanitize=undefined -fno-omit-frame-pointer"
      UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1"
      BENCH: no

task:
  name: 'lint'
  << : *BASE_TEMPLATE
  container:
    dockerfile: ci/linux-debian.Dockerfile
    memory: 2G
    cpu: 4
  matrix:
    << : *ENV_MATRIX_SAN_VALGRIND
  matrix:
    - env:
        CXX: g++
    - env:
        CXX: clang++ -gdwarf-4
  << : *MERGE_BASE
  test_script:
    - ./ci/cirrus.sh
  << : *CAT_LOGS

task:
  name: 'tidy'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: medium
  env:
    HOST: i686-linux-gnu
  matrix:
    << : *ENV_MATRIX_VALGRIND
  matrix:
    - env:
        CXX: i686-linux-gnu-g++
    - env:
        CXX: clang++ --target=i686-linux-gnu -gdwarf-4
        CXXFLAGS: -g -O2 -isystem /usr/i686-linux-gnu/include -isystem /usr/i686-linux-gnu/include/c++/10/i686-linux-gnu
  test_script:
    - ./ci/cirrus.sh
  << : *CAT_LOGS

task:
  name: "arm64: macOS Monterey"
  macos_instance:
    image: ghcr.io/cirruslabs/macos-monterey-base:latest
  env:
    # Cirrus gives us a fixed number of 4 virtual CPUs.
    MAKEFLAGS: -j5
  matrix:
    - env:
        CXX: g++-11
      # Homebrew's gcc for arm64 has no libubsan.
      matrix:
        - env:
            ENABLE_FIELDS: 28
        - env:
            BUILD: distcheck
    - env:
        CXX: clang++
      matrix:
        - env:
            ENABLE_FIELDS: 28
        - env:
            BUILD: distcheck
        - env:
            CXXFLAGS:  "-fsanitize=undefined -fno-omit-frame-pointer"
            LDFLAGS: "-fsanitize=undefined -fno-omit-frame-pointer"
            UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1"
            BENCH: no
  brew_script:
    - brew update
    - brew install automake libtool gcc@11
  << : *MERGE_BASE
  test_script:
    - ./ci/cirrus.sh
  << : *CAT_LOGS

task:
  name: 'Win64, unit tests, no gui tests, no functional tests'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: small
  env:
    EXEC_CMD: qemu-s390x
    HOST: s390x-linux-gnu
    BUILD:
  << : *MERGE_BASE
  test_script:
    - ./ci/cirrus.sh
  << : *CAT_LOGS

task:
  name: '32-bit CentOS, dash, gui'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: small
  env:
    FILE_ENV: "./ci/test/00_setup_env_i686_centos.sh"

task:
  name: 'previous releases, depends DEBUG'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: small
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_previous_releases.sh"

task:
  name: 'TSan, depends, gui'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: medium
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_tsan.sh"

task:
  name: 'MSan, depends'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: small
  timeout_in: 300m  # Use longer timeout for the *rare* case where a full build (llvm + msan + depends + ...) needs to be done.
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_msan.sh"

task:
  name: 'fuzzer,address,undefined,integer, no depends'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: medium
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_fuzz.sh"

task:
  name: 'multiprocess, i686, DEBUG'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: medium
  env:
    FILE_ENV: "./ci/test/00_setup_env_i686_multiprocess.sh"

task:
  name: 'no wallet, libbitcoinkernel'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: small
  env:
    FILE_ENV: "./ci/test/00_setup_env_native_nowallet_libbitcoinkernel.sh"

task:
  name: 'macOS-cross, gui, no tests'
  << : *GLOBAL_TASK_TEMPLATE
  persistent_worker:
    labels:
      type: arm64
  env:
    FILE_ENV: "./ci/test/00_setup_env_mac_cross.sh"
