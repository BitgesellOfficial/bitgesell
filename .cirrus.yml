env:  # Global defaults
  PACKAGE_MANAGER_INSTALL: "apt-get update && apt-get install -y"
  MAKEJOBS: "-j10"
  TEST_RUNNER_PORT_MIN: "14000"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache
  CI_FAILFAST_TEST_LEAVE_DANGLING: "1"  # Cirrus CI does not care about dangling process and setting this variable avoids killing the CI script itself on error
  CCACHE_SIZE: "200M"
  CCACHE_DIR: "/tmp/ccache_dir"
  CCACHE_NOHASHDIR: "1"  # Debug info might contain a stale path if the build dir changes, but this is fine

cirrus_ephemeral_worker_template_env: &CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV
  DANGER_RUN_CI_ON_HOST: "1"  # Containers will be discarded after the run, so there is no risk that the ci scripts modify the system

persistent_worker_template_env: &PERSISTENT_WORKER_TEMPLATE_ENV
  RESTART_CI_DOCKER_BEFORE_RUN: "1"

persistent_worker_template: &PERSISTENT_WORKER_TEMPLATE
  persistent_worker: {}  # https://cirrus-ci.org/guide/persistent-workers/

# https://cirrus-ci.org/guide/tips-and-tricks/#sharing-configuration-between-tasks
filter_template: &FILTER_TEMPLATE
  skip: $CIRRUS_REPO_FULL_NAME == "BGL-core/gui" && $CIRRUS_PR == ""  # No need to run on the read-only mirror, unless it is a PR. https://cirrus-ci.org/guide/writing-tasks/#conditional-task-execution
  stateful: false  # https://cirrus-ci.org/guide/writing-tasks/#stateful-tasks

base_template: &BASE_TEMPLATE
  << : *FILTER_TEMPLATE
  merge_base_script:
    # Unconditionally install git (used in fingerprint_script) and set the
    # default git author name (used in verify-commits.py)
    - bash -c "$PACKAGE_MANAGER_INSTALL git"
    - git config --global user.email "ci@ci.ci"
    - git config --global user.name "ci"
    - if [ "$CIRRUS_PR" = "" ]; then exit 0; fi
    - git fetch $CIRRUS_REPO_CLONE_URL $CIRRUS_BASE_BRANCH
    - git merge FETCH_HEAD  # Merge base to detect silent merge conflicts

linux_container_snippet: &LINUX_CONTAINER
  container:
    image: ubuntu:focal
    cpu: 1
    # Gives us more CPUs for free if they're available.
    greedy: true
    # More than enough for our scripts.
    memory: 1G

task:
  name: "x86_64: Linux (Debian stable)"
  << : *LINUX_CONTAINER
  matrix: &ENV_MATRIX
    - env: {WIDEMUL:  int64,  RECOVERY: yes}
    - env: {WIDEMUL:  int64,                 ECDH: yes, SCHNORRSIG: yes}
    - env: {WIDEMUL: int128}
    - env: {WIDEMUL: int128,  RECOVERY: yes,            SCHNORRSIG: yes}
    - env: {WIDEMUL: int128,                 ECDH: yes, SCHNORRSIG: yes}
    - env: {WIDEMUL: int128,  ASM: x86_64}
    - env: {                  RECOVERY: yes,            SCHNORRSIG: yes}
    - env: {BUILD: distcheck, WITH_VALGRIND: no, CTIMETEST: no, BENCH: no}
    - env: {CPPFLAGS: -DDETERMINISTIC}
    - env: {CFLAGS: -O0, CTIMETEST: no}
    - env: { ECMULTGENPRECISION: 2, ECMULTWINDOW: 2 }
    - env: { ECMULTGENPRECISION: 8, ECMULTWINDOW: 4 }
  matrix:
    - env:
        CC: gcc
    - env:
        CC: clang
  << : *MERGE_BASE
  test_script:
    - ./ci/cirrus.sh
  << : *CAT_LOGS

task:
  name: "i686: Linux (Debian stable)"
  << : *LINUX_CONTAINER
  env:
    HOST: i686-linux-gnu
    ECDH: yes
    RECOVERY: yes
    SCHNORRSIG: yes
  matrix:
    - env:
        CC: i686-linux-gnu-gcc
    - env:
        CC: clang --target=i686-pc-linux-gnu -isystem /usr/i686-linux-gnu/include
  << : *MERGE_BASE
  test_script:
    - ./ci/cirrus.sh
  << : *CAT_LOGS

task:
  name: "Win64 native [msvc]"
  << : *FILTER_TEMPLATE
  windows_container:
    cpu: 4
    memory: 8G
    image: cirrusci/windowsservercore:visualstudio2019
  timeout_in: 120m
  env:
    PATH: 'C:\jom;C:\Python39;C:\Python39\Scripts;C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin;%PATH%'
    PYTHONUTF8: 1
    CI_VCPKG_TAG: '2022.04.12'
    VCPKG_DOWNLOADS: 'C:\Users\ContainerAdministrator\AppData\Local\vcpkg\downloads'
    VCPKG_DEFAULT_BINARY_CACHE: 'C:\Users\ContainerAdministrator\AppData\Local\vcpkg\archives'
    CCACHE_DIR: 'C:\Users\ContainerAdministrator\AppData\Local\ccache'
    WRAPPED_CL: 'C:\Users\ContainerAdministrator\AppData\Local\Temp\cirrus-ci-build\ci\test\wrapped-cl.bat'
    QT_DOWNLOAD_URL: 'https://download.qt.io/official_releases/qt/5.15/5.15.3/single/qt-everywhere-opensource-src-5.15.3.zip'
    QT_LOCAL_PATH: 'C:\qt-everywhere-opensource-src-5.15.3.zip'
    QT_SOURCE_DIR: 'C:\qt-everywhere-src-5.15.3'
    QTBASEDIR: 'C:\Qt_static'
    x64_NATIVE_TOOLS: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvars64.bat"'
    QT_CONFIGURE_COMMAND: '..\configure -release -silent -opensource -confirm-license -opengl desktop -static -static-runtime -mp -qt-zlib -qt-pcre -qt-libpng -nomake examples -nomake tests -nomake tools -no-angle -no-dbus -no-gif -no-gtk -no-ico -no-icu -no-libjpeg -no-libudev -no-sql-sqlite -no-sql-odbc -no-sqlite -no-vulkan -skip qt3d -skip qtactiveqt -skip qtandroidextras -skip qtcharts -skip qtconnectivity -skip qtdatavis3d -skip qtdeclarative -skip doc -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtimageformats -skip qtlocation -skip qtlottie -skip qtmacextras -skip qtmultimedia -skip qtnetworkauth -skip qtpurchasing -skip qtquick3d -skip qtquickcontrols -skip qtquickcontrols2 -skip qtquicktimeline -skip qtremoteobjects -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtsvg -skip qtvirtualkeyboard -skip qtwayland -skip qtwebchannel -skip qtwebengine -skip qtwebglplugin -skip qtwebsockets -skip qtwebview -skip qtx11extras -skip qtxmlpatterns -no-openssl -no-feature-bearermanagement -no-feature-printdialog -no-feature-printer -no-feature-printpreviewdialog -no-feature-printpreviewwidget -no-feature-sql -no-feature-sqlmodel -no-feature-textbrowser -no-feature-textmarkdownwriter -no-feature-textodfwriter -no-feature-xml'
    IgnoreWarnIntDirInTempDetected: 'true'
  merge_script:
    - git config --global user.email "ci@ci.ci"
    - git config --global user.name "ci"
    # Windows filesystem loses the executable bit, and all of the executable
    # files are considered "modified" now. It will break the following `git merge`
    # command. The next two commands make git ignore this issue.
    - git config core.filemode false
    - git reset --hard
    - PowerShell -NoLogo -Command if ($env:CIRRUS_PR -ne $null) { git fetch $env:CIRRUS_REPO_CLONE_URL $env:CIRRUS_BASE_BRANCH; git merge FETCH_HEAD; }
  msvc_qt_built_cache:
    folder: "%QTBASEDIR%"
    reupload_on_changes: false
    fingerprint_script:
      - echo %QT_DOWNLOAD_URL% %QT_CONFIGURE_COMMAND%
      - msbuild -version
    populate_script:
      - curl -L -o C:\jom.zip http://download.qt.io/official_releases/jom/jom.zip
      - mkdir C:\jom
      - tar -xf C:\jom.zip -C C:\jom
      - curl -L -o %QT_LOCAL_PATH% %QT_DOWNLOAD_URL%
      - tar -xf %QT_LOCAL_PATH% -C C:\
      - '%x64_NATIVE_TOOLS%'
      - cd %QT_SOURCE_DIR%
      - mkdir build
      - cd build
      - '%QT_CONFIGURE_COMMAND% -prefix %QTBASEDIR%'
      - jom
      - jom install
  vcpkg_tools_cache:
    folder: '%VCPKG_DOWNLOADS%\tools'
    reupload_on_changes: false
    fingerprint_script:
      - echo %CI_VCPKG_TAG%
      - msbuild -version
  vcpkg_binary_cache:
    folder: '%VCPKG_DEFAULT_BINARY_CACHE%'
    reupload_on_changes: true
    fingerprint_script:
      - echo %CI_VCPKG_TAG%
      - type build_msvc\vcpkg.json
      - msbuild -version
    populate_script:
      - mkdir %VCPKG_DEFAULT_BINARY_CACHE%
  ccache_cache:
    folder: '%CCACHE_DIR%'
  install_tools_script:
    - choco install --yes --no-progress ccache
    - choco install --yes --no-progress python3 --version=3.9.6
    - pip install zmq
    - ccache --version
    - python -VV
  install_vcpkg_script:
    - cd ..
    - git clone --quiet https://github.com/microsoft/vcpkg.git
    - cd vcpkg
    - git -c advice.detachedHead=false checkout %CI_VCPKG_TAG%
    - .\bootstrap-vcpkg -disableMetrics
    - echo set(VCPKG_BUILD_TYPE release) >> triplets\x64-windows-static.cmake
    - .\vcpkg integrate install
    - .\vcpkg version
  build_script:
    - '%x64_NATIVE_TOOLS%'
    - cd %CIRRUS_WORKING_DIR%
    - ccache --zero-stats
    - python build_msvc\msvc-autogen.py
    - msbuild build_msvc\BGL.sln -property:CLToolExe=%WRAPPED_CL% -property:Configuration=Release -maxCpuCount -verbosity:minimal -noLogo
    - ccache --show-stats
  unit_tests_script:
    - src\test_BGL.exe -l test_suite
    - src\bench_BGL.exe > NUL
    - python test\util\test_runner.py
    - python test\util\rpcauth-test.py
  functional_tests_script:
    # Increase the dynamic port range to the maximum allowed value to mitigate "OSError: [WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted".
    # See: https://docs.microsoft.com/en-us/biztalk/technical-guides/settings-that-can-be-modified-to-improve-network-performance
    - netsh int ipv4 set dynamicport tcp start=1025 num=64511
    - netsh int ipv6 set dynamicport tcp start=1025 num=64511
    # Exclude feature_dbcrash for now due to timeout
    - python test\functional\test_runner.py --nocleanup --ci --quiet --combinedlogslen=4000 --jobs=4 --timeout-factor=8 --extended --exclude feature_dbcrash

task:
  name: "s390x (big-endian): Linux (Debian stable, QEMU)"
  << : *LINUX_CONTAINER
  env:
    WRAPPER_CMD: qemu-s390x
    SECP256K1_TEST_ITERS: 16
    HOST: s390x-linux-gnu
    WITH_VALGRIND: no
    ECDH: yes
    RECOVERY: yes
    SCHNORRSIG: yes
    CTIMETEST: no
  << : *MERGE_BASE
  test_script:
    # https://sourceware.org/bugzilla/show_bug.cgi?id=27008
    - rm /etc/ld.so.cache
    - ./ci/cirrus.sh
  << : *CAT_LOGS

task:
  name: "ARM32: Linux (Debian stable, QEMU)"
  << : *LINUX_CONTAINER
  env:
    WRAPPER_CMD: qemu-arm
    SECP256K1_TEST_ITERS: 16
    HOST: arm-linux-gnueabihf
    WITH_VALGRIND: no
    ECDH: yes
    RECOVERY: yes
    SCHNORRSIG: yes
    CTIMETEST: no
  matrix:
    - env: {}
    - env: {EXPERIMENTAL: yes, ASM: arm}
  << : *MERGE_BASE
  test_script:
    - ./ci/cirrus.sh
  << : *CAT_LOGS

task:
  name: "ARM64: Linux (Debian stable, QEMU)"
  << : *LINUX_CONTAINER
  env:
    WRAPPER_CMD: qemu-aarch64
    SECP256K1_TEST_ITERS: 16
    HOST: aarch64-linux-gnu
    WITH_VALGRIND: no
    ECDH: yes
    RECOVERY: yes
    SCHNORRSIG: yes
    CTIMETEST: no
  << : *MERGE_BASE
  test_script:
    - ./ci/cirrus.sh
  << : *CAT_LOGS

task:
  name: "ppc64le: Linux (Debian stable, QEMU)"
  << : *LINUX_CONTAINER
  env:
    WRAPPER_CMD: qemu-ppc64le
    SECP256K1_TEST_ITERS: 16
    HOST: powerpc64le-linux-gnu
    WITH_VALGRIND: no
    ECDH: yes
    RECOVERY: yes
    SCHNORRSIG: yes
    CTIMETEST: no
  << : *MERGE_BASE
  test_script:
    - ./ci/cirrus.sh
  << : *CAT_LOGS

task:
  name: "x86_64 (mingw32-w64): Windows (Debian stable, Wine)"
  << : *LINUX_CONTAINER
  env:
    WRAPPER_CMD: wine64-stable
    SECP256K1_TEST_ITERS: 16
    HOST: x86_64-w64-mingw32
    WITH_VALGRIND: no
    ECDH: yes
    RECOVERY: yes
    SCHNORRSIG: yes
    CTIMETEST: no
  << : *MERGE_BASE
  test_script:
    - ./ci/cirrus.sh
  << : *CAT_LOGS

task:
  << : *LINUX_CONTAINER
  env:
    ECDH: yes
    RECOVERY: yes
    SCHNORRSIG: yes
    CTIMETEST: no
  matrix:
    - name: "Valgrind (memcheck)"
      container:
        cpu: 2
      env:
        # The `--error-exitcode` is required to make the test fail if valgrind found errors, otherwise it'll return 0 (https://www.valgrind.org/docs/manual/manual-core.html)
        WRAPPER_CMD: "valgrind --error-exitcode=42"
        SECP256K1_TEST_ITERS: 2
    - name: "UBSan, ASan, LSan"
      container:
        memory: 2G
      env:
        CFLAGS: "-fsanitize=undefined,address -g"
        UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1"
        ASAN_OPTIONS: "strict_string_checks=1:detect_stack_use_after_return=1:detect_leaks=1"
        LSAN_OPTIONS: "use_unaligned=1"
        SECP256K1_TEST_ITERS: 32
  # Try to cover many configurations with just a tiny matrix.
  matrix:
    - env:
        ASM: auto
    - env:
        ASM: no
        ECMULTGENPRECISION: 2
        ECMULTWINDOW: 2
  matrix:
    - env:
        CC: clang
    - env:
        HOST: i686-linux-gnu
        CC: i686-linux-gnu-gcc
  << : *MERGE_BASE
  test_script:
    - ./ci/cirrus.sh
  << : *CAT_LOGS

task:
  name: "C++ -fpermissive"
  << : *LINUX_CONTAINER
  env:
    # ./configure correctly errors out when given CC=g++.
    # We hack around this by passing CC=g++ only to make.
    CC: gcc
    MAKEFLAGS: -j4 CC=g++ CFLAGS=-fpermissive\ -g
    WERROR_CFLAGS:
    ECDH: yes
    RECOVERY: yes
    SCHNORRSIG: yes
  << : *MERGE_BASE
  test_script:
    - ./ci/cirrus.sh
  << : *CAT_LOGS

task:
  name: "sage prover"
  << : *LINUX_CONTAINER
  test_script:
    - cd sage
    - sage prove_group_implementations.sage
